openapi: 3.0.1
x-stoplight:
  id: ty0l0m8lth33t
info:
  title: '${name}'
  version: '2023-03-06T07:01:08Z'
  contact:
    name: chocono2230
  description: 61bcプロジェクト用API
paths:
  /healthcheck:
    get:
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: '${integration_uri}'
        credentials: '${credential_role_arn}'
        httpMethod: POST
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      responses:
        '200':
          description: OK
      x-internal: true
      tags:
        - Test
      description: ヘルスチェック
      operationId: healthcheck
    options:
      security: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode":200}'
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      description: CORS/プリフライトリクエスト
      operationId: ''
      tags:
        - Test
    parameters: []
  /posts:
    get:
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: '${integration_uri}'
        credentials: '${credential_role_arn}'
        httpMethod: POST
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                required:
                  - posts
      x-internal: true
      description: 全てのPostの取得
      operationId: postGetAll
      parameters:
        - schema:
            type: string
          in: query
          name: userid
          description: 特定ユーザに対して、全件取得
      tags:
        - Post
    options:
      security: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode":200}'
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      description: CORS/プリフライトリクエスト
      operationId: ''
      tags:
        - Test
    parameters: []
    post:
      summary: ''
      operationId: postPost
      responses:
        '201':
          $ref: '#/components/responses/createPost'
        '400':
          description: Bad Request
      description: Postの作成
      requestBody:
        $ref: '#/components/requestBodies/createPost'
      tags:
        - Post
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: '${integration_uri}'
        credentials: '${credential_role_arn}'
        httpMethod: POST
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
  '/posts/{id}':
    get:
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: '${integration_uri}'
        credentials: '${credential_role_arn}'
        httpMethod: POST
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: '#/components/schemas/Post'
      x-internal: true
      description: Postの取得
      operationId: getPost
      parameters: []
      tags:
        - Post
    options:
      security: []
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode":200}'
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
      description: CORS/プリフライトリクエスト
      operationId: ''
      tags:
        - Test
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: ''
      operationId: deletePost
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
      description: Postの削除
      tags:
        - Post
      parameters:
        - schema:
            type: string
          in: query
          name: useridentity
          description: ユーザ認証用文字列
          required: true
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: '${integration_uri}'
        credentials: '${credential_role_arn}'
        httpMethod: POST
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
components:
  schemas:
    Post:
      title: Post
      x-stoplight:
        id: a4e4rdrnzsqm1
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        timestamp:
          type: number
        gsiSKey:
          type: string
        replyId:
          type: string
        lastReplyId:
          type: string
        content:
          type: object
          properties:
            comment:
              type: string
        reactions:
          type: array
          items:
            type: object
      required:
        - id
        - userId
        - timestamp
        - gsiSKey
        - content
    Empty:
      title: Empty Schema
      type: object
  securitySchemes:
    '${auth}':
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - '${auth_provider_arn}'
  requestBodies:
    createPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: string
              replyId:
                type: string
              content:
                type: object
                properties:
                  comment:
                    type: string
            required:
              - userId
              - content
      description: Post作成
  responses:
    createPost:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
x-internal: true
tags:
  - name: Post
  - name: Test
security:
  - '${auth}': []
